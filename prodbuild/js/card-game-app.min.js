/*! solitaire-clone 2014-07-31 */
var CardGameDebugMessage=Class({message:null,getMessage:function(){return this.message},callingMethod:null,getCallingMethod:function(){return this.callingMethod},__construct:function(message,callingMethod){if(void 0===message||"string"!=typeof message&&"object"!=typeof message)throw"CardGameDebugMessage.__construct() - The required `message` parameter must be string, array, or object.";if(void 0===callingMethod||"string"!=typeof callingMethod)throw"CardGameDebugMessage.__construct() - The required `callingMethod` parameter must be a string.";this.message=message,this.callingMethod=callingMethod},toString:function(){var stringVal="Debug: "+this.getCallingMethod()+"() - "+this.getMessage();return stringVal},toConsole:function(){var tbr=this;switch(typeof this.getMessage()){case"null":case"object":tbr=this;break;case"string":tbr=this.toString()}return tbr}}),CardGameExceptionSeverity={INFO:{code:0,prefix:"Info: "},WARNING:{code:1,prefix:"Warning: "},ERROR:{code:2,prefix:"Error: "},SPEED:{code:3,prefix:"Speed: "}},CardGameException=Class({"extends":CardGameDebugMessage},{severity:CardGameExceptionSeverity.ERROR,getSeverity:function(){return this.severity},__construct:function(message,callingMethod,severity){this.super("__construct",message,callingMethod),void 0!==severity&&"object"==typeof severity&&(this.severity=severity)},toString:function(){var prefix=void 0!==this.getSeverity().prefix?this.getSeverity().prefix:"Error: ",stringVal=prefix+this.getCallingMethod()+"() - "+this.getMessage();return stringVal}}),TypeException=Class({"extends":CardGameException},{type:null,getType:function(){return this.type},__construct:function(expectedType,callingMethod){if("string"!=typeof expectedType)throw"TypeException.__construct() - The `expectedType` parameter must be a string.";var message="Type mismatch: expected type is `"+expectedType+"`.";this.super("__construct",message,callingMethod),this.type=expectedType}}),IModelRules=Interface({_numDecksInGame:"number",_acesHigh:"boolean",_includeJokers:"boolean",_stackkModel:"array",_layout:"array",_useTimer:"boolean"}),CardNumber=Class({_cardValue:null,__setCardValue:function(cv){var parsed=null;if("number"!=typeof cv||isNaN(parsed=parseInt(cv)))throw new TypeException("Integer","CardNumber.__setCardValue");this._cardValue=cv},getCardValue:function(){return this._cardValue},_cardNumberName:null,__setCardNumberName:function(na){if("string"!=typeof na)throw new TypeException("string","CardNumber.__setCardNumberName");this._cardNumberName=na},getCardNumberName:function(){return this._cardNumberName},__construct:function(cardValue,cardNumberName){if(void 0===cardValue)throw new CardGameException("CardNumber value is required.","CardNumber.__construct");if(void 0===cardNumberName)throw new CardGameException("CardNumber name is required.","CardNumber.__construct");this.__setCardValue(cardValue),this.__setCardNumberName(cardNumberName)}}),FanningDirection=Class({_fanningDirectionName:null,__setFanningDirectionName:function(fdn){if("string"!=typeof fdn)throw new TypeException("string","FanningDirection.__setFanningDirectionName");this._fanningDirectionName=fdn},getFanningDirectionName:function(){return this._fanningDirectionName},__construct:function(fanningDirectionName){if(void 0===fanningDirectionName)throw new CardGameException("Fanning Direction name is required.","FanningDirection.__construct");this.__setFanningDirectionName(fanningDirectionName)}}),GameRules=Class({"implements":IModelRules},{_numDecksInGame:null,__setNumDecksInGame:function(n){var parsed=null;if("number"!=typeof n||isNaN(parsed=parseInt(n)))throw new TypeException("Integer","GameRules.__setNumDecksInGame");this._numDecksInGame=parsed},getNumDecksInGame:function(){return this._numDecksInGame},_includeJokers:null,__setIncludeJokers:function(ij){if("boolean"!=typeof ij)throw new TypeException("Boolean","GameRules.__setIncludeJokers");this._includeJokers=ij},getIncludeJokers:function(){return this._includeJokers},_acesHigh:null,__setAcesHigh:function(ah){if("boolean"!=typeof ah)throw new TypeException("Boolean","GameRules.__setAcesHigh");this._acesHigh=ah},getAcesHigh:function(){return this._acesHigh},_stackModel:null,__setStackModel:function(st){if("array"!==$.type(st))throw new TypeException("Array","GameRules.__setStackModel");this._stackModel=st},getStackModel:function(){return this._stackModel},_layout:null,__setLayout:function(ly){if("array"!==$.type(ly))throw new TypeException("Array","GameRules.__setLayout");this._layout=ly},getLayout:function(){return this._layout},_useTimer:null,__setUseTimer:function(timer){if("boolean"!=typeof timer)throw new TypeException("Boolean","GameRules.__setUseTimer");this._useTimer=timer},getUseTimer:function(){return this._useTimer},__construct:function(){null!==this.getLayout()&&this.__setStackModel(this.__createStackModel())},__createStackModel:function(){var layout=this.getLayout(),stacks=null;if(null!==layout&&layout.length>0){var stackTypes=new StackTypes,fanningDirections=new FanningDirectionSet;stacks=[];for(var i=0;i<layout.length;i++){for(var row=layout[i],stackRow=[],j=0;j<row.length;j++){var layoutStackInfo=row[j],st=null;null!==layoutStackInfo&&(st=new Stack(stackTypes[layoutStackInfo.stackType.getStackTypeName()],fanningDirections[layoutStackInfo.fanningDirection.getFanningDirectionName()],layoutStackInfo.numCardsFacingDown,layoutStackInfo.numCardsFacingUp)),stackRow.push(st)}stacks.push(stackRow)}}return stacks},getDealerStack:function(){var stackTypes=new StackTypes,dealerStack=this.getStacksByType(stackTypes.dealer)[0];return dealerStack},getStacksByType:function(stackType){var stacksTBR=[],stacks=this.getStackModel();if(null!==stacks&&stacks.length>0)for(var i=0;i<stacks.length;i++)for(var stackRow=stacks[i],j=0;j<stackRow.length;j++){var stack=stackRow[j];null!==stack&&stack.getStackType().getStackTypeName()===stackType.getStackTypeName()&&stacksTBR.push(stack)}return stacksTBR},runForEachStackObject:function(context,methodToRun){for(var allStacks=this.getStackModel(),i=0,smlen=allStacks.length;smlen>i;i++)for(var j=0,rowlen=allStacks[i].length;rowlen>j;j++){var curStack=allStacks[i][j];methodToRun.call(context,curStack,i,j)}}}),StackType=Class({_stackTypeName:null,__setStackTypeName:function(stn){if("string"!=typeof stn)throw new TypeException("string","StackType.__setStackTypeName");this._stackTypeName=stn},getStackTypeName:function(){return this._stackTypeName},__construct:function(stackTypeName){if(void 0===stackTypeName)throw new CardGameException("Stack Type name is required.","StackType.__construct");this.__setStackTypeName(stackTypeName)}}),Stack=Class({_stackType:null,__setStackType:function(st){if(!st.hasOwnProperty("instanceOf")||!st.instanceOf(StackType))throw new TypeException("StackType","Stack.__setStackType");this._stackType=st},getStackType:function(){return this._stackType},_fanningDirection:null,__setFanningDirection:function(fd){if(!fd.hasOwnProperty("instanceOf")||!fd.instanceOf(FanningDirection))throw new TypeException("FanningDirection","Stack.__setFanningDirection");this._fanningDirection=fd},getFanningDirection:function(){return this._fanningDirection},_numCardsFacingDown:0,__setNumCardsFacingDown:function(ncfd){var parsed=null;if("number"!=typeof ncfd||isNaN(parsed=parseInt(ncfd)))throw new TypeException("Integer","Stack.__setNumCardsFacingDown");this._numCardsFacingDown=parsed},getNumCardsFacingDown:function(){return this._numCardsFacingDown},_numCardsFacingUp:0,__setNumCardsFacingUp:function(ncfu){var parsed=null;if("number"!=typeof ncfu||isNaN(parsed=parseInt(ncfu)))throw new TypeException("Integer","Stack.__setNumCardsFacingUp");this._numCardsFacingUp=parsed},getNumCardsFacingUp:function(){return this._numCardsFacingUp},__construct:function(stackType,fanningDirection,numCardsFacingDown,numCardsFacingUp){var callStackCurrent="Stack.__construct";if(void 0===stackType)throw new CardGameException("Stack Type param is required.",callStackCurrent);this.__setStackType(stackType);var fanningDirections=new FanningDirectionSet;void 0===fanningDirection&&(fanningDirection=fanningDirections.none),this.__setFanningDirection(fanningDirection),void 0!==numCardsFacingDown&&this.__setNumCardsFacingDown(numCardsFacingDown),void 0!==numCardsFacingUp&&this.__setNumCardsFacingUp(numCardsFacingUp)}}),Suit=Class({suitName:null,__setSuitName:function(n){if("string"!=typeof n)throw new TypeException("string","Suit.__setSuitName");this.suitName=n},getSuitName:function(){return this.suitName},color:null,__setColor:function(c){if("object"!=typeof c||void 0===c.parse||"function"!=typeof c.parse)throw new TypeException("Color","Suit.__setColor");this.color=c},getColor:function(){return this.color},__construct:function(suitName,color){if(void 0===suitName)throw new CardGameException("Suit name cannot be null.","Suit.__construct");if(void 0===color)throw new CardGameException("Color cannot be null.","Suit.__construct");this.__setSuitName(suitName),this.__setColor(color)}}),IViewRules=Interface({_variationName:"string",_cards:"array",mouseDownTouchStartEventHandler:"function",mouseUpTouchEndEventHandler:"function",mouseClickEventHandler:"function",mouseMoveTouchMoveEventHandler:"function"}),AppView=Class({_container:null,__setContainer:function($con){if("object"!=typeof $con||void 0===$con.jquery)throw new TypeException("jQuery","AppView.__setContainer");this._container=$con},getContainer:function(){return this._container},_buttons:null,__setButtons:function($btns){if(null!==$btns&&("object"!=typeof $btns||void 0===$btns.jquery))throw new TypeException("jQuery","AppView.__setButtons");if(null!==this._buttons&&this.getContainer().find("div").filter('[data-card-game-view-element="button-container"]').remove(),null!==$btns){var $buttonContainer=$("<div></div>").attr("data-card-game-view-element","button-container").append($btns);this.getContainer().prepend($buttonContainer)}this._buttons=$btns},getButtons:function(){return this._buttons},_gameChoiceModal:null,__setGameChoiceModal:function($gcm){if(null!==$gcm&&("object"!=typeof $gcm||void 0===$gcm.jquery))throw new TypeException("jQuery","AppView.__setGameChoiceModal");null!==this._gameChoiceModal&&this.getContainer().find("div").filter('[data-card-game-view-element="game-choice-modal"]').remove(),null!==$gcm&&((null===$gcm.attr("data-card-game-view-element")||"game-choice-modal"!==$gcm.attr("data-card-game-view-element"))&&$gcm.attr("data-card-game-view-element","game-choice-modal"),this.getContainer().append($gcm)),this._gameChoiceModal=$gcm},getGameChoiceModal:function(){return this._gameChoiceModal},_timerContainer:null,__setTimerContainer:function($tc){if(null!==$tc&&("object"!=typeof $tc||void 0===$tc.jquery))throw new TypeException("jQuery","AppView.__setTimerContainer");null!==this._timerContainer&&this.getContainer().find("div").filter('[data-card-game-view-element="timer"]').remove(),null!==$tc&&((null===$tc.attr("data-card-game-view-element")||"timer"!==$tc.attr("data-card-game-view-element"))&&$tc.attr("data-card-game-view-element","timer"),this.getContainer().append($tc)),this._timerContainer=$tc},getTimerContainer:function(){return this._timerContainer},__construct:function($container){if(void 0===$container)throw new CardGameException("View `$container` param is required.","AppView.__construct");this.__setContainer($container);var $buttons=this.__createButtons();this.__setButtons($buttons);var $modal=this.__createGameChoiceModal();this.__setGameChoiceModal($modal);var $timerContainer=this.__createTimerContainer();this.__setTimerContainer($timerContainer)},__createButtons:function(){var $buttons=this.__createButtonAddEventHandler("startNewGame","Start New Game").add(this.__createButtonAddEventHandler("restartCurrentGame","Restart Current Game"));return $buttons},__createButtonAddEventHandler:function(dataCardGameButton,buttonText,clickEventHandler){if(void 0===dataCardGameButton)throw new CardGameException("The `dataCardGameButton` param is required.","AppView.__createButtonAddEventHandler");if(void 0===buttonText)throw new CardGameException("The `buttonText` param is required.","AppView.__createButtonAddEventHandler");if("string"!=typeof dataCardGameButton)throw new TypeException("string","AppView.__createButtonAddEventHandler");if("string"!=typeof buttonText)throw new TypeException("string","AppView.__createButtonAddEventHandler");var $btn=$("<button></button>").attr("data-card-game-button",dataCardGameButton).text(buttonText);return void 0!==clickEventHandler&&"function"==typeof clickEventHandler&&$btn.on("click",clickEventHandler),$btn},__createGameChoiceModal:function(){var $modal=$("<div></div>").attr("data-card-game-view-element","game-choice-modal");return $modal},__createTimerContainer:function(){var $timerContainer=$("<div></div>").attr("data-card-game-view-element","timer");return $timerContainer},initGameView:function($gameContainer){if(void 0===$gameContainer)throw new CardGameException("The `$gameContainer` param is required.","AppView.initGameView");if("object"!=typeof $gameContainer||void 0===$gameContainer.jquery)throw new TypeException("jQuery","AppView.initGameView");(null===$gameContainer.attr("data-card-game-view-element")||"canvas-container"!==$gameContainer.attr("data-card-game-view-element"))&&$gameContainer.attr("data-card-game-view-element","canvas-container");var $currentGameContainer=this.getContainer().find("div").filter('[data-card-game-view-element="canvas-container"]');$currentGameContainer.length>0&&$currentGameContainer.remove(),this.getGameChoiceModal().before($gameContainer)},resetGameView:function(){this.__setGameViewCanvas(null),this.updateTimer("")},updateTimer:function(timeStr){this.getTimerContainer().html(timeStr)}}),Card=new Class({_suit:null,__setSuit:function(st){if(!st.hasOwnProperty("instanceOf")||!st.instanceOf(Suit))throw new TypeException("Suit","Card.__setSuit");this._suit=st},getSuit:function(){return this._suit},__construct:function(){},someFunction:function(){}}),GameView=Class({_gameContainer:null,__setGameContainer:function($gc){if("object"!=typeof $gc||void 0===$gc.jquery)throw new TypeException("jQuery","GameView.__setGameContainer");this._gameContainer=$gc},getGameContainer:function(){return this._gameContainer},__construct:function(stackModel){if(void 0===stackModel)throw new CardGameException("The `stackModel` array param is required.","GameView.__construct");if("array"!==$.type(stackModel))throw new TypeException("Array","GameView.__construct");if(stackModel.length<1)throw new CardGameException("Expected `stackModel` param to have at least one row of stacks.","GameView.__construct");var $gameViewContainer=this.__createLayoutFromSpecs(stackModel);this.__setGameContainer($gameViewContainer)},__createLayoutFromSpecs:function(stackModel){for(var $gameViewContainer=$("<div></div>").attr("data-card-game-view-element","canvas-container"),i=($(""),0);i<stackModel.length;i++){for(var stackRow=stackModel[i],$domRow=(stackRow.length+1,$("<div></div>").attr("data-card-game-view-element","canvas-row").addClass("row")),j=0;j<stackRow.length;j++){var stack=stackRow[j],$stackDOMElement=$("<div></div>").attr({"data-card-game-view-element":"stack"}).addClass("col-md-1").data({stack:null!==stack?stack:"empty"});$domRow.append($stackDOMElement)}$gameViewContainer.append($domRow)}return $gameViewContainer},__isCard:function($card){var tbr=!0,isJquery="object"==typeof $card&&void 0!==$card.jquery;return isJquery&&"img"===$card.prop("tagName").toLowerCase()&&void 0!==$card.attr("data-card-game-view-element")&&"card"===$card.attr("data-card-game-view-element")&&void 0!==$card.attr("data-card-face-showing")&&void 0!==$card.attr("data-card-front-source")&&void 0!==$card.attr("data-card-back-source")&&void 0!==$card.attr("data-card-deck-num")&&void 0!==$card.data("suit")&&void 0!==$card.data("card-number")||(tbr=!1),tbr},__createCard:function(deckNum,suitObj,cardNumberObject){var cardImageSrcName=cardNumberObject.getCardNumberName().toLowerCase()+"_of_"+suitObj.getSuitName().toLowerCase()+".png",$card=$("<img />").attr({src:"../img/cards/"+cardImageSrcName,"data-card-game-view-element":"card","data-card-face-showing":"front","data-card-front-source":"../img/cards/"+cardImageSrcName,"data-card-back-source":"../img/cards/card_back.png","data-card-deck-num":deckNum}).data({suit:suitObj,"card-number":cardNumberObject});return $card},__createDeck:function(deckNum,acesHigh){var $deck=$(),ss=new SuitSet,cns=new CardNumberSet;acesHigh&&cns.ace.__setCardValue(cns.king.getCardValue()+1);var that=this;return $.each(ss,function(suitName,suitObj){$.each(cns,function(cardNumberName,cardNumberObject){$deck=$deck.add(that.__createCard(deckNum,suitObj,cardNumberObject))})}),$deck},createCards:function(numDecks,acesHigh,includeJokers){if(void 0===numDecks)throw new CardGameException("The `numDecks` param is required.","GameView.createCards");var parsed=null;if("number"!=typeof numDecks||isNaN(parsed=parseInt(numDecks)))throw new TypeException("Integer","GameView.createCards");if(void 0===acesHigh)throw new CardGameException("The `acesHigh` param is required.","GameView.createCards");if("boolean"!=typeof acesHigh)throw new TypeException("Boolean","GameView.createCards");if(void 0===includeJokers)throw new CardGameException("The `includeJokers` param is required.","GameView.createCards");if("boolean"!=typeof includeJokers)throw new TypeException("Boolean","GameView.createCards");for(var $cards=$(),i=0;numDecks>i;i++)$cards=$cards.add(this.__createDeck(numDecks,acesHigh,includeJokers));return $cards},flipCard:function($card){if(void 0===$card)throw new CardGameException("The `$card` param is required.","GameView.flipCard");if(!this.__isCard($card))throw new CardGameException("The `$card` param is not a valid Card.","GameView.flipCard");return"front"===$card.attr("data-card-face-showing")?$card=this.showCardBack($card):"back"===$card.attr("data-card-face-showing")&&($card=this.showCardFront($card)),$card},showCardBack:function($card){if(void 0===$card)throw new CardGameException("The `$card` param is required.","GameView.showCardBack");if(!this.__isCard($card))throw new CardGameException("The `$card` param is not a valid Card.","GameView.showCardBack");return $card.attr({src:$card.attr("data-card-back-source"),"data-card-face-showing":"back"}),$card},showCardFront:function($card){if(void 0===$card)throw new CardGameException("The `$card` param is required.","GameView.showCardFront");if(!this.__isCard($card))throw new CardGameException("The `$card` param is not a valid Card.","GameView.showCardFront");return $card.attr({src:$card.attr("data-card-front-source"),"data-card-face-showing":"front"}),$card},getStackView:function(stack){var $allStackDOMElements=this.getGameContainer().find("div").filter('[data-card-game-view-element="stack"]'),$matchedView=$allStackDOMElements.filter(function(){return null!==$(this).data("stack")&&$(this).data("stack")===stack});if(0===$matchedView.length)throw new CardGameException("No Stack View could be found for the supplied Stack object","GameView.getStackView");return $matchedView},emptyStackView:function(stack){if(null!==stack&&stack.hasOwnProperty("instanceOf")&&stack.instanceOf(Stack)===!0){var $stackDOMElement=this.getStackView(stack);$stackDOMElement.children().detach()}}}),CardNumberSet=Class({two:null,getTwo:function(){return this.two},three:null,getThree:function(){return this.three},four:null,getFour:function(){return this.four},five:null,getFive:function(){return this.five},six:null,getSix:function(){return this.six},seven:null,getSeven:function(){return this.seven},eight:null,getEight:function(){return this.eight},nine:null,getNine:function(){return this.nine},ten:null,getTen:function(){return this.ten},jack:null,getJack:function(){return this.jack},queen:null,getQueen:function(){return this.queen},king:null,getKing:function(){return this.king},ace:null,getAce:function(){return this.ace},__construct:function(){return this.ace=new CardNumber(1,"ace"),this.two=new CardNumber(2,"two"),this.three=new CardNumber(3,"three"),this.four=new CardNumber(4,"four"),this.five=new CardNumber(5,"five"),this.six=new CardNumber(6,"six"),this.seven=new CardNumber(7,"seven"),this.eight=new CardNumber(8,"eight"),this.nine=new CardNumber(9,"nine"),this.ten=new CardNumber(10,"ten"),this.jack=new CardNumber(11,"jack"),this.queen=new CardNumber(12,"queen"),this.king=new CardNumber(13,"king"),{ace:this.getAce(),two:this.getTwo(),three:this.getThree(),four:this.getFour(),five:this.getFive(),six:this.getSix(),seven:this.getSeven(),eight:this.getEight(),nine:this.getNine(),ten:this.getTen(),jack:this.getJack(),queen:this.getQueen(),king:this.getKing()}}}),FanningDirectionSet=Class({up:null,getUp:function(){return this.up},down:null,getDown:function(){return this.down},left:null,getLeft:function(){return this.left},right:null,getRight:function(){return this.right},none:null,getNone:function(){return this.none},__construct:function(){return this.up=new FanningDirection("up"),this.down=new FanningDirection("down"),this.left=new FanningDirection("left"),this.right=new FanningDirection("right"),this.none=new FanningDirection("none"),{up:this.getUp(),down:this.getDown(),left:this.getLeft(),right:this.getRight(),none:this.getNone()}}}),StackTypes=Class({dealer:null,getDealer:function(){return this.dealer},draw:null,getDraw:function(){return this.draw},inPlay:null,getInPlay:function(){return this.inPlay},foundation:null,getFoundation:function(){return this.foundation},__construct:function(){return this.dealer=new StackType("dealer"),this.draw=new StackType("draw"),this.inPlay=new StackType("inPlay"),this.foundation=new StackType("foundation"),{dealer:this.getDealer(),draw:this.getDraw(),inPlay:this.getInPlay(),foundation:this.getFoundation()}}}),SuitSet=Class({hearts:null,getHearts:function(){return this.hearts},diamonds:null,getDiamonds:function(){return this.diamonds},spades:null,getSpades:function(){return this.spades},clubs:null,getClubs:function(){return this.clubs},__construct:function(){return this.hearts=new Suit("hearts",new Color("#FF0000")),this.diamonds=new Suit("diamonds",new Color("#FF0000")),this.spades=new Suit("spades",new Color("#000000")),this.clubs=new Suit("clubs",new Color("#000000")),{hearts:this.getHearts(),diamonds:this.getDiamonds(),spades:this.getSpades(),clubs:this.getClubs()}}}),GameController=Class({_gameName:null,__setGameName:function(gn){if("string"!=typeof gn)throw new TypeException("String","GameController.__setGameName");this._gameName=gn},getGameName:function(){return this._gameName},_gameRules:null,__setGameRules:function(gr){if(!gr.hasOwnProperty("instanceOf")||!gr.instanceOf(GameRules))throw new TypeException("GameRules","GameController.__setGameRules");this._gameRules=gr},getGameRules:function(){return this._gameRules},_gameView:null,__setGameView:function(gv){if(!gv.hasOwnProperty("instanceOf")||!gv.instanceOf(GameView))throw new TypeException("GameView","GameController.__setGameView");this._gameView=gv},getGameView:function(){return this._gameView},_cards:null,__setCards:function($cards){if("object"!=typeof $cards||void 0===$cards.jquery)throw new TypeException("jQuery","GameController.__setCards");this._cards=$cards},getCards:function(){return this._cards},_cardsResetCopy:null,__setCardsResetCopy:function($cardsCopy){if("object"!=typeof $cardsCopy||void 0===$cardsCopy.jquery)throw new TypeException("jQuery","GameController.__setCardsResetCopy");this._cardsResetCopy=$cardsCopy},getCardsResetCopy:function(){return this._cardsResetCopy},__construct:function(gameName){if(void 0===gameName)throw new CardGameException("The `gameName` param is required.","GameController.__construct");this.__setGameName(gameName),this.__loadGameRules(),this.__loadGameView();var $cards=this.getGameView().createCards(this.getGameRules().getNumDecksInGame(),this.getGameRules().getAcesHigh(),this.getGameRules().getIncludeJokers());this.__setCards($cards)},__loadGameRules:function(){var grClassName=this.getGameName()+"Rules";try{var gameRules=new window[grClassName];this.__setGameRules(gameRules)}catch(e){throw null!==e.message.match(/'undefined' is not a constructor \(evaluating 'new window\[grClassName\]\(\)'\)/)?new CardGameException('The expected game class "'+grClassName+'" does not exist.',"GameController.__loadGameRules"):e}},__loadGameView:function(){var gvClassName=this.getGameName()+"View";try{var gameView=new window[gvClassName](this.getGameRules().getStackModel());this.__setGameView(gameView)}catch(e){throw null!==e.message.match(/'undefined' is not a constructor \(evaluating 'new window\[gvClassName\]\(this\.getGameRules\(\)\.getStackModel\(\)\)'\)/)?new CardGameException('The expected game class "'+gvClassName+'" does not exist.',"GameController.__loadGameView"):e}},__shuffleCardArray:function(cardArr,numTimes){cardArr.reverse();var numCards=cardArr.length,middle=Math.floor(numCards/2),shuffledCardsArr=[];shuffledCardsArr.length=numCards;for(var cardLeftStart=0,cardRightStart=middle,merged=!1,i=0;!merged;){for(var cardsLeftRemaining=middle-cardLeftStart,randFromLeft=Math.min(Math.ceil(4*Math.random()),cardsLeftRemaining),j=0;randFromLeft>j;j++)shuffledCardsArr[i++]=cardArr[cardLeftStart++];for(var cardsRightRemaining=numCards-cardRightStart,randFromRight=Math.min(Math.ceil(4*Math.random()),cardsRightRemaining),k=0;randFromRight>k;k++)shuffledCardsArr[i++]=cardArr[cardRightStart++];merged=cardLeftStart==middle&&cardRightStart==numCards}var parsedNumTimes=null;return void 0!==numTimes&&!isNaN(parsedNumTimes=parseInt(numTimes))&&parsedNumTimes>0?this.__shuffleCardArray(shuffledCardsArr,parsedNumTimes-1):shuffledCardsArr},__shuffleCards:function(numTimes){var cardsArr=this.getCards().toArray(),shuffledCardsArr=this.__shuffleCardArray(cardsArr,numTimes),$shuffledCards=$(shuffledCardsArr);this.__setCards($shuffledCards)},__storeCopyOfCards:function(){this.__setCardsResetCopy(this.getCards().clone(!0,!1))},__stackCollectAllCards:function(stack){this.getGameRules().runForEachStackObject(this.getGameView(),this.getGameView().emptyStackView);var $stackDOMElement=this.getGameView().getStackView(stack),that=this;this.getCards().each(function(index,card){var $card=$(card),cardIndexOne=index+1;$card=cardIndexOne<=stack.getNumCardsFacingDown()?that.getGameView().showCardBack($card):that.getGameView().showCardFront($card)}).appendTo($stackDOMElement)},__getNumCardsToDeal:function(){var numCardsToDeal=0,st=new StackTypes;return this.getGameRules().runForEachStackObject(this,function(stack){null!==stack&&stack.hasOwnProperty("instanceOf")&&stack.instanceOf(Stack)===!0&&stack.getStackType().getStackTypeName()===st.inPlay.getStackTypeName()&&(numCardsToDeal+=stack.getNumCardsFacingDown()+stack.getNumCardsFacingUp())}),numCardsToDeal},__dealCards:function(){var numCardsToDeal=this.__getNumCardsToDeal(),st=new StackTypes,inPlayStacks=(new FanningDirectionSet,this.getGameRules().getStacksByType(st.inPlay)),curCardIndex=0,curStackIndex=0,cardsNotDealt=!0;do{var curStack=inPlayStacks[curStackIndex],totalCardsInStackNeeded=curStack.getNumCardsFacingDown()+curStack.getNumCardsFacingUp(),$stackDOMElement=this.getGameView().getStackView(curStack),$cardsInStack=$stackDOMElement.children('img[data-card-game-view-element="card"]'),curNumCardsInStack=$cardsInStack.length;if(curStackIndex=(curStackIndex+1)%inPlayStacks.length,curNumCardsInStack!==totalCardsInStackNeeded){var $card=this.getCards().eq(curCardIndex);$card=curNumCardsInStack<curStack.getNumCardsFacingDown()?this.getGameView().showCardBack($card):this.getGameView().showCardFront($card),$card.appendTo($stackDOMElement),curCardIndex++,cardsNotDealt=numCardsToDeal>curCardIndex}}while(cardsNotDealt)},beginGamePlay:function(){for(var success=!1,numTimes=0;3>numTimes;)numTimes=Math.floor(10*Math.random())+1;this.__shuffleCards(numTimes),this.__storeCopyOfCards();var dealerStack=this.getGameRules().getDealerStack();if(null===dealerStack)throw new CardGameException("No Dealer stack exists in the layout.","GameController.beginGamePlay");if(!dealerStack.hasOwnProperty("instanceOf")||dealerStack.instanceOf(Stack)!==!0)throw new CardGameException("The found Dealer stack is not a Stack object.","GameController.beginGamePlay");return this.__stackCollectAllCards(dealerStack),this.__dealCards(),success=!0}}),CardGameApp=Class({_appView:null,__setAppView:function(appView){if(!(null===appView||appView.hasOwnProperty("instanceOf")&&appView.instanceOf(AppView)))throw new TypeException("AppView","CardGameApp.__setAppView");this._appView=appView},getAppView:function(){return this._appView},_gameController:null,__setGameController:function(gameController){if(!(null===gameController||gameController.hasOwnProperty("instanceOf")&&gameController.instanceOf(GameController)))throw new TypeException("GameController","CardGameApp.__setGameController");this._gameController=gameController},getGameController:function(){return this._gameController},_registeredGames:null,__setRegisteredGames:function(rg){if("array"!==$.type(rg))throw new TypeException("Array","CardGameApp.__setRegisteredGames");this._registeredGames=rg},getRegisteredGames:function(){return this._registeredGames},_loadedGame:null,__setLoadedGame:function(lgName){if("string"!==$.type(lgName))throw new TypeException("String","CardGameApp.__setLoadedGame");this._loadedGame=lgName},getLoadedGame:function(){return this._loadedGame},_debug:!1,__setDebug:function(debug){if("boolean"!==$.type(debug))throw new TypeException("Boolean","CardGameApp.__setDebug");this._debug=debug},getDebug:function(){return this._debug},__timer:null,__construct:function($containerElement,games,debug){var callStackCurrent="CardGameApp.__construct";try{if("undefined"===$.type($containerElement))throw new CardGameException("Container element is required.",callStackCurrent);if("object"!==$.type($containerElement)||"undefined"===$.type($containerElement.jquery))throw new TypeException("jQuery",callStackCurrent);if(0===$containerElement.length)throw new CardGameException("Specified element could not be found.",callStackCurrent);if("undefined"===$.type(games))throw new CardGameException("List of games is required.",callStackCurrent);if("array"!==$.type(games))throw new TypeException("Array",callStackCurrent);if(0===games.length)throw new CardGameException("List of games cannot be empty.",callStackCurrent);"undefined"!==$.type(debug)&&this.__setDebug(debug),this.__registerGames(games),this.__initApplication($containerElement),this.__setApplicationEvents(),this.__setLoadedGame(this.__loadDefaultGame())}catch(e){return this.__setDebug(!0),this.logConsoleDebugMessage(e),this}this.logConsoleDebugMessage(new CardGameDebugMessage("Successfully loaded the game "+this.getLoadedGame(),callStackCurrent))},__registerGames:function(games){var callStackCurrent="CardGameApp.__registerGames",i=0,registeredGames=[];for(i=0;i<games.length;i++)try{var gameStr=games[i],gameRulesClassStr=gameStr+"Rules",gameRulesClass=window[gameRulesClassStr],gameViewClassStr=gameStr+"View",gameViewClass=window[gameViewClassStr];if("undefined"===$.type(gameRulesClass))throw new CardGameException("Game class '"+gameRulesClassStr+"' does not exist.",callStackCurrent);if("undefined"===$.type(gameViewClass))throw new CardGameException("Game class '"+gameViewClassStr+"' does not exist.",callStackCurrent);registeredGames.push({gameName:gameStr,gameRulesClass:gameRulesClass,gameViewClass:gameViewClass})}catch(e){this.logConsoleDebugMessage(e)}if(0===registeredGames.length)throw new CardGameException("None of the specified Games exist.",callStackCurrent);this.__setRegisteredGames(registeredGames)},__initApplication:function($containerElement){var appView=new AppView($containerElement);this.__setAppView(appView)},__setApplicationEvents:function(){this.getAppView().getButtons().filter('[data-card-game-button="startNewGame"]').on("click",$.proxy(this.__startNewGameBtnClickHandler,this)).end().filter('[data-card-game-button="restartCurrentGame"]').on("click",$.proxy(this.__restartCurrentGameBtnClickHandler,this))
},__loadDefaultGame:function(){var domSpecified=this.getAppView().getContainer().attr("data-card-game"),registeredGames=this.getRegisteredGames(),defaultGameToLoadStr=registeredGames[0].gameName;if(void 0!==domSpecified)for(var i=0;i<registeredGames.length;i++)if(registeredGames[i].gameName===domSpecified){defaultGameToLoadStr=domSpecified;break}return this.__loadGame(defaultGameToLoadStr)},__loadGame:function(gameName){var gameNameLoaded=null;try{var gameController=new GameController(gameName);this.__setGameController(gameController),this.__addGameViewToAppView(),this.getGameController().beginGamePlay(),this.getGameController().getGameRules().getUseTimer()&&(clearInterval(this.__timer),this.__startGameTimer()),gameNameLoaded=gameName}catch(e){this.logConsoleDebugMessage(e)}return gameNameLoaded},__startGameTimer:function(){var dateObj=new Date;dateObj.setHours(0),dateObj.setMinutes(0),dateObj.setSeconds(0),this.getAppView().updateTimer(":00");var that=this;this.__timer=setInterval(function(){dateObj.setSeconds(dateObj.getSeconds()+1);var timeStr="";dateObj.getMinutes()>0&&(timeStr+=dateObj.getMinutes()),timeStr+=":",dateObj.getSeconds()<10&&(timeStr+="0"),timeStr+=dateObj.getSeconds(),that.getAppView().updateTimer(timeStr)},1e3)},__addGameViewToAppView:function(){var $gameContainer=this.getGameController().getGameView().getGameContainer();this.getAppView().initGameView($gameContainer)},logConsoleDebugMessage:function(debugObject){if(this.getDebug()===!0&&void 0!==console){var logString="";logString=debugObject.hasOwnProperty("instanceOf")&&debugObject.instanceOf(CardGameDebugMessage)?debugObject:"object"===$.type(debugObject)&&void 0!==debugObject.toConsole&&"function"===$.type(debugObject.toConsole)?debugObject.toConsole():debugObject,console.log(logString)}},__startNewGameBtnClickHandler:function(){this.getAppView().showGameChoiceModal()},__startNewSelectedGameBtnClickHandler:function(){var gameStr=$(this).attr("data-card-game-game");if(null===gameStr)throw new CardGameException("Expected the game button to have a `data-card-game-game` attribute equal to '"+gameStr+"'.","CardGameApp.__startNewSelectedGameBtnClickHandler");var success=this.__loadGame(gameStr);return this.getAppView().resetGameChoiceModal(),success},__restartCurrentGameBtnClickHandler:function(){this.getGameController().beginGamePlay(),this.getGameController().getGameRules().getUseTimer()&&(clearInterval(this.__timer),this.__startGameTimer())}});